{{#*inline "transitionExpr"~}}
  {{#join matchIntervals " || "~}}
    {{#if equal~}}
  _cint == {{low}}
    {{~else~}}
  _cint >= {{low}} && _cint <= {{high}}
    {{~/if}}
  {{~/join}}
{{~/inline}}
pragma solidity ^0.8.0;

library {{name}} {
  struct State {
    bool accepts;
    function (bytes1) pure internal returns (State memory) func;
  }

{{#if regex}}
  string public constant regex = "{{{regex}}}";

{{/if}}
  function s0(bytes1 c) pure internal returns (State memory) {
    c = c;
    return State(false, s0);
  }

{{#states}}
  function s{{id}}(bytes1 c) pure internal returns (State memory) {

     uint8 _cint = uint8(c);
     
    {{#outputs}}
        if ({{> transitionExpr }}) {
          return State({{accepts}}, s{{to}});
        }
    {{/outputs}}
    {{^outputs}}
        // silence unused var warning
        c = c;
    {{/outputs}}

    return State(false, s0);
  }

{{/states}}
  function matches(string memory input) public pure returns (bool) {
    State memory cur = State({{startAccepts}}, s1);

    for (uint i = 0; i < bytes(input).length; i++) {
      bytes1 c = bytes(input)[i];

      cur = cur.func(c);
    }

    return cur.accepts;
  }
}
